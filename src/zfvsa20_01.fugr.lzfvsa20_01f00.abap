*---------------------------------------------------------------------*
*    view related FORM routines
*---------------------------------------------------------------------*
*...processing: ZVSA2004........................................*
FORM GET_DATA_ZVSA2004.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZTSA2001 WHERE
(VIM_WHERETAB) .
    CLEAR ZVSA2004 .
ZVSA2004-MANDT =
ZTSA2001-MANDT .
ZVSA2004-PERNR =
ZTSA2001-PERNR .
ZVSA2004-ENAME =
ZTSA2001-ENAME .
ZVSA2004-ENTDT =
ZTSA2001-ENTDT .
ZVSA2004-GENDER =
ZTSA2001-GENDER .
ZVSA2004-DEPID =
ZTSA2001-DEPID .
<VIM_TOTAL_STRUC> = ZVSA2004.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZVSA2004 .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZVSA2004.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZVSA2004-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZTSA2001 WHERE
  PERNR = ZVSA2004-PERNR .
    IF SY-SUBRC = 0.
    DELETE ZTSA2001 .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZTSA2001 WHERE
  PERNR = ZVSA2004-PERNR .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZTSA2001.
    ENDIF.
ZTSA2001-MANDT =
ZVSA2004-MANDT .
ZTSA2001-PERNR =
ZVSA2004-PERNR .
ZTSA2001-ENAME =
ZVSA2004-ENAME .
ZTSA2001-ENTDT =
ZVSA2004-ENTDT .
ZTSA2001-GENDER =
ZVSA2004-GENDER .
ZTSA2001-DEPID =
ZVSA2004-DEPID .
    IF SY-SUBRC = 0.
    UPDATE ZTSA2001 ##WARN_OK.
    ELSE.
    INSERT ZTSA2001 .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZVSA2004-UPD_FLAG,
STATUS_ZVSA2004-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ENTRY_ZVSA2004.
  SELECT SINGLE * FROM ZTSA2001 WHERE
PERNR = ZVSA2004-PERNR .
ZVSA2004-MANDT =
ZTSA2001-MANDT .
ZVSA2004-PERNR =
ZTSA2001-PERNR .
ZVSA2004-ENAME =
ZTSA2001-ENAME .
ZVSA2004-ENTDT =
ZTSA2001-ENTDT .
ZVSA2004-GENDER =
ZTSA2001-GENDER .
ZVSA2004-DEPID =
ZTSA2001-DEPID .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZVSA2004 USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZVSA2004-PERNR TO
ZTSA2001-PERNR .
MOVE ZVSA2004-MANDT TO
ZTSA2001-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZTSA2001'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZTSA2001 TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZTSA2001'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZVSA2005........................................*
FORM GET_DATA_ZVSA2005.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZTSA2002 WHERE
(VIM_WHERETAB) .
    CLEAR ZVSA2005 .
ZVSA2005-MANDT =
ZTSA2002-MANDT .
ZVSA2005-DEPID =
ZTSA2002-DEPID .
ZVSA2005-PHONE =
ZTSA2002-PHONE .
    SELECT SINGLE * FROM ZTSA2002_T WHERE
DEPID = ZTSA2002-DEPID AND
SPRAS = SY-LANGU .
    IF SY-SUBRC EQ 0.
ZVSA2005-DTEXT =
ZTSA2002_T-DTEXT .
    ENDIF.
<VIM_TOTAL_STRUC> = ZVSA2005.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZVSA2005 .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZVSA2005.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZVSA2005-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZTSA2002 WHERE
  DEPID = ZVSA2005-DEPID .
    IF SY-SUBRC = 0.
    DELETE ZTSA2002 .
    ENDIF.
    DELETE FROM ZTSA2002_T WHERE
    DEPID = ZTSA2002-DEPID .
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZTSA2002 WHERE
  DEPID = ZVSA2005-DEPID .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZTSA2002.
    ENDIF.
ZTSA2002-MANDT =
ZVSA2005-MANDT .
ZTSA2002-DEPID =
ZVSA2005-DEPID .
ZTSA2002-PHONE =
ZVSA2005-PHONE .
    IF SY-SUBRC = 0.
    UPDATE ZTSA2002 ##WARN_OK.
    ELSE.
    INSERT ZTSA2002 .
    ENDIF.
    SELECT SINGLE FOR UPDATE * FROM ZTSA2002_T WHERE
    DEPID = ZTSA2002-DEPID AND
    SPRAS = SY-LANGU .
      IF SY-SUBRC <> 0.   "insert preprocessing: init WA
        CLEAR ZTSA2002_T.
ZTSA2002_T-DEPID =
ZTSA2002-DEPID .
ZTSA2002_T-SPRAS =
SY-LANGU .
      ENDIF.
ZTSA2002_T-DTEXT =
ZVSA2005-DTEXT .
    IF SY-SUBRC = 0.
    UPDATE ZTSA2002_T ##WARN_OK.
    ELSE.
    INSERT ZTSA2002_T .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZVSA2005-UPD_FLAG,
STATUS_ZVSA2005-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ENTRY_ZVSA2005.
  SELECT SINGLE * FROM ZTSA2002 WHERE
DEPID = ZVSA2005-DEPID .
ZVSA2005-MANDT =
ZTSA2002-MANDT .
ZVSA2005-DEPID =
ZTSA2002-DEPID .
ZVSA2005-PHONE =
ZTSA2002-PHONE .
    SELECT SINGLE * FROM ZTSA2002_T WHERE
DEPID = ZTSA2002-DEPID AND
SPRAS = SY-LANGU .
    IF SY-SUBRC EQ 0.
ZVSA2005-DTEXT =
ZTSA2002_T-DTEXT .
    ELSE.
      CLEAR SY-SUBRC.
      CLEAR ZVSA2005-DTEXT .
    ENDIF.
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZVSA2005 USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZVSA2005-DEPID TO
ZTSA2002-DEPID .
MOVE ZVSA2005-MANDT TO
ZTSA2002-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZTSA2002'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZTSA2002 TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZTSA2002'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

MOVE ZTSA2002-DEPID TO
ZTSA2002_T-DEPID .
MOVE SY-LANGU TO
ZTSA2002_T-SPRAS .
MOVE ZVSA2005-MANDT TO
ZTSA2002_T-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZTSA2002_T'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZTSA2002_T TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZTSA2002_T'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZVSA20PRO.......................................*
FORM GET_DATA_ZVSA20PRO.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZTSA20PRO WHERE
(VIM_WHERETAB) .
    CLEAR ZVSA20PRO .
ZVSA20PRO-MANDT =
ZTSA20PRO-MANDT .
ZVSA20PRO-PROID =
ZTSA20PRO-PROID .
ZVSA20PRO-PTYPE =
ZTSA20PRO-PTYPE .
ZVSA20PRO-PPRICE =
ZTSA20PRO-PPRICE .
ZVSA20PRO-WAERS =
ZTSA20PRO-WAERS .
ZVSA20PRO-PERNR =
ZTSA20PRO-PERNR .
    SELECT SINGLE * FROM ZTSA20PRO_T WHERE
PROID = ZTSA20PRO-PROID AND
SPRAS = SY-LANGU .
    IF SY-SUBRC EQ 0.
ZVSA20PRO-PTEXT =
ZTSA20PRO_T-PTEXT .
    ENDIF.
<VIM_TOTAL_STRUC> = ZVSA20PRO.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZVSA20PRO .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZVSA20PRO.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZVSA20PRO-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZTSA20PRO WHERE
  PROID = ZVSA20PRO-PROID .
    IF SY-SUBRC = 0.
    DELETE ZTSA20PRO .
    ENDIF.
    DELETE FROM ZTSA20PRO_T WHERE
    PROID = ZTSA20PRO-PROID .
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZTSA20PRO WHERE
  PROID = ZVSA20PRO-PROID .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZTSA20PRO.
    ENDIF.
ZTSA20PRO-MANDT =
ZVSA20PRO-MANDT .
ZTSA20PRO-PROID =
ZVSA20PRO-PROID .
ZTSA20PRO-PTYPE =
ZVSA20PRO-PTYPE .
ZTSA20PRO-PPRICE =
ZVSA20PRO-PPRICE .
ZTSA20PRO-WAERS =
ZVSA20PRO-WAERS .
ZTSA20PRO-PERNR =
ZVSA20PRO-PERNR .
    IF SY-SUBRC = 0.
    UPDATE ZTSA20PRO ##WARN_OK.
    ELSE.
    INSERT ZTSA20PRO .
    ENDIF.
    SELECT SINGLE FOR UPDATE * FROM ZTSA20PRO_T WHERE
    PROID = ZTSA20PRO-PROID AND
    SPRAS = SY-LANGU .
      IF SY-SUBRC <> 0.   "insert preprocessing: init WA
        CLEAR ZTSA20PRO_T.
ZTSA20PRO_T-PROID =
ZTSA20PRO-PROID .
ZTSA20PRO_T-SPRAS =
SY-LANGU .
      ENDIF.
ZTSA20PRO_T-PTEXT =
ZVSA20PRO-PTEXT .
    IF SY-SUBRC = 0.
    UPDATE ZTSA20PRO_T ##WARN_OK.
    ELSE.
    INSERT ZTSA20PRO_T .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZVSA20PRO-UPD_FLAG,
STATUS_ZVSA20PRO-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ENTRY_ZVSA20PRO.
  SELECT SINGLE * FROM ZTSA20PRO WHERE
PROID = ZVSA20PRO-PROID .
ZVSA20PRO-MANDT =
ZTSA20PRO-MANDT .
ZVSA20PRO-PROID =
ZTSA20PRO-PROID .
ZVSA20PRO-PTYPE =
ZTSA20PRO-PTYPE .
ZVSA20PRO-PPRICE =
ZTSA20PRO-PPRICE .
ZVSA20PRO-WAERS =
ZTSA20PRO-WAERS .
ZVSA20PRO-PERNR =
ZTSA20PRO-PERNR .
    SELECT SINGLE * FROM ZTSA20PRO_T WHERE
PROID = ZTSA20PRO-PROID AND
SPRAS = SY-LANGU .
    IF SY-SUBRC EQ 0.
ZVSA20PRO-PTEXT =
ZTSA20PRO_T-PTEXT .
    ELSE.
      CLEAR SY-SUBRC.
      CLEAR ZVSA20PRO-PTEXT .
    ENDIF.
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZVSA20PRO USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZVSA20PRO-PROID TO
ZTSA20PRO-PROID .
MOVE ZVSA20PRO-MANDT TO
ZTSA20PRO-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZTSA20PRO'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZTSA20PRO TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZTSA20PRO'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

MOVE ZTSA20PRO-PROID TO
ZTSA20PRO_T-PROID .
MOVE SY-LANGU TO
ZTSA20PRO_T-SPRAS .
MOVE ZVSA20PRO-MANDT TO
ZTSA20PRO_T-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZTSA20PRO_T'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZTSA20PRO_T TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZTSA20PRO_T'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
